#!/bin/bash
# Restic backup script for {{ inventory_hostname }}

set -e

# Export environment variables directly
export RESTIC_REPOSITORY="{{ restic_repository_url }}/{{ inventory_hostname }}"
export RESTIC_PASSWORD="{{ restic_repository_password }}"
export RESTIC_CACHE_DIR="{{ restic_cache_path }}"

{% if restic_repository_type == 's3' %}
# AWS S3 configuration
export AWS_ACCESS_KEY_ID="{{ restic_aws_access_key_id }}"
export AWS_SECRET_ACCESS_KEY="{{ restic_aws_secret_access_key }}"
{% elif restic_repository_type == 'b2' %}
# Backblaze B2 configuration
export B2_ACCOUNT_ID="{{ restic_b2_account_id }}"
export B2_ACCOUNT_KEY="{{ restic_b2_account_key }}"
{% endif %}

# Additional restic options
export RESTIC_PROGRESS="true"
export RESTIC_COMPRESSION="auto"

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a {{ restic_log_file }}
}

# Email notification function
send_notification() {
    local subject="$1"
    local message="$2"

    if [ -n "{{ restic_notification_email }}" ]; then
        echo "$message" | mail -s "$subject" "{{ restic_notification_email }}"
    fi
}

# Start backup
log "Starting backup for {{ inventory_hostname }}"

{% if restic_repository_type == 'local' %}
# Create local repository directory if it doesn't exist
mkdir -p "{{ restic_repository_url }}"
{% endif %}

# Run database dumps if configured
{% if restic_database_backups | length > 0 %}
if [ -f "{{ restic_scripts_path }}/scripts/dump_databases.sh" ]; then
    log "Running database dumps"
    bash {{ restic_scripts_path }}/scripts/dump_databases.sh
fi
{% endif %}

# Create exclude file
cat > {{ restic_scripts_path }}/exclude.txt << EOF
{% for pattern in restic_exclude_patterns %}
{{ pattern }}
{% endfor %}
EOF

# Backup command
BACKUP_PATHS=(
{% for path in restic_backup_paths %}
    "{{ path }}"
{% endfor %}
{% if restic_database_backups | length > 0 %}
    "{{ restic_scripts_path }}/dumps"
{% endif %}
)

# Perform backup
if {{ restic_bin_path }} backup \
    --exclude-file={{ restic_scripts_path }}/exclude.txt \
    --tag "host:{{ inventory_hostname }}" \
    --tag "date:$(date +%Y-%m-%d)" \
    --tag "time:$(date +%H-%M)" \
{% for path in restic_backup_paths %}
    --tag "path:{{ path | basename }}" \
{% endfor %}
{% if restic_database_backups | length > 0 %}
    --tag "database" \
{% for db_backup in restic_database_backups %}
    --tag "db:{{ db_backup.name }}" \
{% endfor %}
{% endif %}
    "${BACKUP_PATHS[@]}" 2>&1 | tee -a {{ restic_log_file }}; then

    log "Backup completed successfully"

{% if restic_database_backups | length > 0 %}
    # Clean up database dumps immediately after successful backup
    log "Cleaning up database dumps from local storage"
    if [ -d "{{ restic_scripts_path }}/dumps" ]; then
        find {{ restic_scripts_path }}/dumps -type f \( -name "*.sql*" -o -name "*.archive*" -o -name "*.dump*" -o -name "*.zst" -o -name "*.lz4" -o -name "*.bz2" -o -name "*.gz" \) -delete 2>/dev/null || true
        log "Database dumps cleaned up successfully"
    fi
{% endif %}

    # Forget old snapshots
    log "Cleaning up old snapshots"
    {{ restic_bin_path }} forget \
        --keep-within-daily {{ restic_keep_within_daily }} \
        --keep-within-weekly {{ restic_keep_within_weekly }} \
        --keep-within-monthly {{ restic_keep_within_monthly }} \
        --prune \
        --tag "{{ inventory_hostname }}" 2>&1 | tee -a {{ restic_log_file }}

    log "Backup process completed for {{ inventory_hostname }}"

else
    log "ERROR: Backup failed for {{ inventory_hostname }}"
    send_notification "Restic Backup Failed - {{ inventory_hostname }}" \
        "Backup failed for {{ inventory_hostname }} at $(date). Check logs at {{ restic_log_file }}"
    exit 1
fi

log "All operations completed successfully"
